{"mappings":"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","sources":["src/pages/Events.ts","node_modules/date-fns/esm/add/index.js","node_modules/@babel/runtime/helpers/esm/typeof.js","node_modules/date-fns/esm/addDays/index.js","node_modules/date-fns/esm/_lib/toInteger/index.js","node_modules/date-fns/esm/toDate/index.js","node_modules/date-fns/esm/_lib/requiredArgs/index.js","node_modules/date-fns/esm/addMonths/index.js","node_modules/date-fns/esm/differenceInDays/index.js","node_modules/date-fns/esm/differenceInCalendarDays/index.js","node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","node_modules/date-fns/esm/startOfDay/index.js","node_modules/date-fns/esm/formatISO/index.js","node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","node_modules/@parcel/runtime-js/lib/runtime-563f81888d687d15.js","node_modules/@parcel/runtime-js/lib/runtime-bfaa4aa48b92cbb5.js"],"sourcesContent":["import render from \"../components/render\"\r\nimport { differenceInDays, formatISO, add } from \"date-fns\"\r\n\r\nasync function loadCalendar() {\r\n  const { Calendar } = await import(\"@fullcalendar/core\")\r\n  return Calendar\r\n}\r\n\r\nasync function loadDayGridPlugin() {\r\n  const { default: dayGridPlugin } = await import(\"@fullcalendar/daygrid\")\r\n  return dayGridPlugin\r\n}\r\n\r\nexport default async function Events() {\r\n  render(`\r\n    <h1>Things that are actually happening at our REAL store</h1>\r\n    <div id=\"calendar\"></div>\r\n    <ul id=\"events-list\"></ul>\r\n  `)\r\n\r\n  const today = new Date()\r\n\r\n  const events = [\r\n    {\r\n      name: \"Murder Mystery Night\",\r\n      start: add(today, { days: 2, hours: 5 }),\r\n      end: add(today, { days: 2, hours: 8 }),\r\n    },\r\n    {\r\n      name: \"Gorgonzola Enthusiasts Conference\",\r\n      start: add(today, { days: 5 }),\r\n      end: add(today, { days: 7 }),\r\n    },\r\n    {\r\n      name: \"Dragon Appreciation Day\",\r\n      start: add(today, { days: 12 }),\r\n      end: add(today, { days: 12 }),\r\n    },\r\n    {\r\n      name: \"Circus Skills Workshop\",\r\n      start: add(today, { days: 15 }),\r\n      end: add(today, { days: 16 }),\r\n    },\r\n    {\r\n      name: \"Couch Sitting Competition\",\r\n      start: add(today, { days: 20 }),\r\n      end: add(today, { days: 21 }),\r\n    },\r\n    {\r\n      name: \"Three Week Rustic Retreat\",\r\n      start: add(today, { days: 25 }),\r\n      end: add(today, { days: 45 }),\r\n    },\r\n  ]\r\n\r\n  const eventsList = document.getElementById(\"events-list\")\r\n  const calendarEl = document.getElementById(\"calendar\")\r\n\r\n  const calenderEvents = document.querySelectorAll(\r\n    \".fc-event\"\r\n  ) as NodeListOf<HTMLButtonElement>\r\n\r\n  if (!calendarEl || !eventsList || !calenderEvents) {\r\n    throw new Error(\"Something just ain't right.\")\r\n  }\r\n\r\n  const Calendar = await loadCalendar()\r\n\r\n  const dayGridPlugin = await loadDayGridPlugin()\r\n\r\n  const calendar = new Calendar(calendarEl, {\r\n    plugins: [dayGridPlugin],\r\n    initialView: \"dayGridMonth\",\r\n    events: events.map((event) => ({\r\n      title: event.name,\r\n      start: formatISO(event.start),\r\n      end: formatISO(event.end),\r\n    })),\r\n  })\r\n\r\n  calendar.render()\r\n\r\n  calendarEl.style.backgroundColor = \"black\"\r\n  calendarEl.style.padding = \"1rem\"\r\n  calendarEl.style.opacity = \"0.8\"\r\n  calendarEl.style.borderRadius = \"0.5rem\"\r\n  calendarEl.style.margin = \"1rem\"\r\n\r\n  calenderEvents.forEach((event) => {\r\n    event.style.whiteSpace = \"normal\"\r\n    event.style.fontSize = \"1.5rem\"\r\n    event.style.textAlign = \"center\"\r\n    event.style.padding = \"0.5rem\"\r\n    event.style.borderRadius = \"0.5rem\"\r\n  })\r\n\r\n  eventsList.style.display = \"grid\"\r\n  eventsList.style.gap = \"1rem\"\r\n\r\n  events.forEach((event) => {\r\n    const daysRemaining = differenceInDays(event.start, today)\r\n    console.log(daysRemaining)\r\n    const listItem = document.createElement(\"li\")\r\n    listItem.textContent = `${event.name} is in ${daysRemaining} days`\r\n    listItem.style.padding = \"1rem\"\r\n    listItem.style.backgroundColor = daysRemaining < 7 ? \"red\" : \"green\"\r\n    listItem.style.color = \"white\"\r\n    listItem.style.borderRadius = \"0.5rem\"\r\n    listItem.style.textAlign = \"center\"\r\n    eventsList?.appendChild(listItem)\r\n  })\r\n}\r\n","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;\n\n  // Add years and months\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date;\n\n  // Add weeks and days\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\n\n  // Add days, hours, minutes and seconds\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  date.setDate(date.getDate() + amount);\n  return date;\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n  var number = Number(dirtyNumber);\n  if (isNaN(number)) {\n    return number;\n  }\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\");\n      // eslint-disable-next-line no-console\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  var dayOfMonth = date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with local time zone, or both.\n * @returns {String} the formatted date string (in local time zone)\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.representation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nexport default function formatISO(date, options) {\n  var _options$format, _options$representati;\n  requiredArgs(1, arguments);\n  var originalDate = toDate(date);\n  if (isNaN(originalDate.getTime())) {\n    throw new RangeError('Invalid time value');\n  }\n  var format = String((_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : 'extended');\n  var representation = String((_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : 'complete');\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : '';\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    var separator = result === '' ? '' : 'T';\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    var time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n  return result;\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n  return sign + output;\n}","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"fqlD0\"))).then(() => parcelRequire('jgkCe'));","module.exports = Promise.all([__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"fqlD0\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"7vBbt\"))]).then(() => parcelRequire('lVBJL'));"],"names":["$eOHur","parcelRequire","async","$8de29e5e2c36b4b5$export$2e2bcd8739ae039","default","today","Date","events","name","start","$vCGCs","days","hours","end","eventsList","document","getElementById","calendarEl","calenderEvents","querySelectorAll","Error","Calendar","$8de29e5e2c36b4b5$var$loadCalendar","plugins","dayGridPlugin","$8de29e5e2c36b4b5$var$loadDayGridPlugin","initialView","map","event","title","$2sgOd","render","style","backgroundColor","padding","opacity","borderRadius","margin","forEach","whiteSpace","fontSize","textAlign","display","gap","daysRemaining","$86sxN","console","log","listItem","createElement","textContent","color","appendChild","$fSwVM","$05f0e7ae1e1dd5d3$export$2e2bcd8739ae039","dirtyDate","duration","$4LmDH","arguments","NaN","years","$esGEx","months","weeks","minutes","seconds","date","$gdr0J","dateWithMonths","$eqWMS","dateWithDays","$6OX6Q","msToAdd","getTime","$b8f57191916382d3$export$2e2bcd8739ae039","obj","Symbol","iterator","constructor","prototype","$4f754377033842c6$export$2e2bcd8739ae039","dirtyAmount","amount","isNaN","setDate","getDate","$a874c42e2166676d$export$2e2bcd8739ae039","dirtyNumber","number","Number","Math","ceil","floor","$bce2d00733a79246$export$2e2bcd8739ae039","argument","argStr","Object","toString","call","warn","stack","$377d1ce359384586$export$2e2bcd8739ae039","required","args","length","TypeError","$a8211859f65764ad$export$2e2bcd8739ae039","dayOfMonth","endOfDesiredMonth","setMonth","getMonth","setFullYear","getFullYear","$5e650688c0910592$var$compareLocalAsc","dateLeft","dateRight","diff","getHours","getMinutes","getSeconds","getMilliseconds","$5e650688c0910592$export$2e2bcd8739ae039","dirtyDateLeft","dirtyDateRight","sign","difference","abs","$lm2ga","result","$9vfYB","$f8bd67cac91ee19b$var$MILLISECONDS_IN_DAY","$f8bd67cac91ee19b$export$2e2bcd8739ae039","startOfDayLeft","$cJfMa","startOfDayRight","timestampLeft","timestampRight","round","$6eb366e006a8b659$export$2e2bcd8739ae039","utcDate","UTC","setUTCFullYear","$9445ecc5e7cfb647$export$2e2bcd8739ae039","setHours","$1c9b3c389e5703c4$export$2e2bcd8739ae039","options","_options$format","_options$representati","originalDate","RangeError","format","String","representation","tzOffset","dateDelimiter","timeDelimiter","day","$bGZx9","month","year","concat","offset","getTimezoneOffset","absoluteOffset","hourOffset","minuteOffset","separator","time","join","$88335940ad51fc8f$export$2e2bcd8739ae039","targetLength","output","module","exports","import","resolve","then","Promise","all"],"version":3,"file":"Events.5c88cac0.js.map"}